import {
  AbiCoder,
  Base58,
  BaseContract,
  BigNumber,
  ConstructorFragment,
  Contract,
  ContractFactory,
  ErrorCode,
  ErrorFragment,
  EventFragment,
  FixedNumber,
  FormatTypes,
  Fragment,
  FunctionFragment,
  HDNode,
  Indexed,
  Interface,
  LogDescription,
  Logger,
  ParamType,
  Signer,
  SigningKey,
  SupportedAlgorithm,
  TransactionDescription,
  TransactionTypes,
  TypedDataEncoder,
  UnicodeNormalizationForm,
  Utf8ErrorFuncs,
  Utf8ErrorReason,
  VoidSigner,
  Wallet,
  Wordlist,
  _fetchData,
  _toEscapedUtf8String,
  accessListify,
  arrayify,
  checkProperties,
  checkResultErrors,
  commify,
  computeAddress,
  computeHmac,
  computePublicKey,
  concat,
  deepCopy,
  defaultAbiCoder,
  defaultPath,
  defineReadOnly,
  dnsEncode,
  entropyToMnemonic,
  fetchJson,
  formatBytes32String,
  formatEther,
  formatUnits,
  getAccountPath,
  getAddress,
  getContractAddress,
  getCreate2Address,
  getDefaultProvider,
  getIcapAddress,
  getJsonWalletAddress,
  getStatic,
  hashMessage,
  hexConcat,
  hexDataLength,
  hexDataSlice,
  hexStripZeros,
  hexValue,
  hexZeroPad,
  hexlify,
  id,
  init_lib,
  init_lib10,
  init_lib11,
  init_lib12,
  init_lib13,
  init_lib14,
  init_lib15,
  init_lib16,
  init_lib17,
  init_lib18,
  init_lib19,
  init_lib2,
  init_lib20,
  init_lib21,
  init_lib22,
  init_lib23,
  init_lib24,
  init_lib25,
  init_lib26,
  init_lib27,
  init_lib3,
  init_lib4,
  init_lib5,
  init_lib6,
  init_lib7,
  init_lib8,
  init_lib9,
  isAddress,
  isBytes,
  isBytesLike,
  isHexString,
  isValidMnemonic,
  isValidName,
  joinSignature,
  keccak256,
  keccak2562,
  lib_exports23 as lib_exports3,
  lib_exports25 as lib_exports4,
  lib_exports6 as lib_exports,
  lib_exports8 as lib_exports2,
  mnemonicToEntropy,
  mnemonicToSeed,
  namehash,
  nameprep,
  pack,
  parse,
  parseBytes32String,
  parseEther,
  parseUnits,
  poll,
  randomBytes,
  recoverAddress,
  recoverPublicKey,
  resolveProperties,
  ripemd160,
  serialize,
  sha256,
  sha2562,
  sha512,
  shallowCopy,
  shuffled,
  splitSignature,
  stripZeros,
  toUtf8Bytes,
  toUtf8CodePoints,
  toUtf8String,
  verifyMessage,
  verifyTypedData,
  wordlists,
  zeroPad
} from "./chunk-2KRRCZJZ.js";
import {
  __export
} from "./chunk-QOVRSCHT.js";

// node_modules/ethers/lib.esm/ethers.js
var ethers_exports = {};
__export(ethers_exports, {
  BaseContract: () => BaseContract,
  BigNumber: () => BigNumber,
  Contract: () => Contract,
  ContractFactory: () => ContractFactory,
  FixedNumber: () => FixedNumber,
  Signer: () => Signer,
  VoidSigner: () => VoidSigner,
  Wallet: () => Wallet,
  Wordlist: () => Wordlist,
  constants: () => lib_exports2,
  errors: () => ErrorCode,
  getDefaultProvider: () => getDefaultProvider,
  logger: () => logger,
  providers: () => lib_exports4,
  utils: () => utils_exports,
  version: () => version,
  wordlists: () => wordlists
});
init_lib15();
init_lib3();
init_lib12();
init_lib22();
init_lib8();
init_lib25();
init_lib25();
init_lib18();

// node_modules/ethers/lib.esm/utils.js
var utils_exports = {};
__export(utils_exports, {
  AbiCoder: () => AbiCoder,
  ConstructorFragment: () => ConstructorFragment,
  ErrorFragment: () => ErrorFragment,
  EventFragment: () => EventFragment,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment,
  FunctionFragment: () => FunctionFragment,
  HDNode: () => HDNode,
  Indexed: () => Indexed,
  Interface: () => Interface,
  LogDescription: () => LogDescription,
  Logger: () => Logger,
  ParamType: () => ParamType,
  RLP: () => lib_exports,
  SigningKey: () => SigningKey,
  SupportedAlgorithm: () => SupportedAlgorithm,
  TransactionDescription: () => TransactionDescription,
  TransactionTypes: () => TransactionTypes,
  UnicodeNormalizationForm: () => UnicodeNormalizationForm,
  Utf8ErrorFuncs: () => Utf8ErrorFuncs,
  Utf8ErrorReason: () => Utf8ErrorReason,
  _TypedDataEncoder: () => TypedDataEncoder,
  _fetchData: () => _fetchData,
  _toEscapedUtf8String: () => _toEscapedUtf8String,
  accessListify: () => accessListify,
  arrayify: () => arrayify,
  base58: () => Base58,
  base64: () => lib_exports3,
  checkProperties: () => checkProperties,
  checkResultErrors: () => checkResultErrors,
  commify: () => commify,
  computeAddress: () => computeAddress,
  computeHmac: () => computeHmac,
  computePublicKey: () => computePublicKey,
  concat: () => concat,
  deepCopy: () => deepCopy,
  defaultAbiCoder: () => defaultAbiCoder,
  defaultPath: () => defaultPath,
  defineReadOnly: () => defineReadOnly,
  dnsEncode: () => dnsEncode,
  entropyToMnemonic: () => entropyToMnemonic,
  fetchJson: () => fetchJson,
  formatBytes32String: () => formatBytes32String,
  formatEther: () => formatEther,
  formatUnits: () => formatUnits,
  getAccountPath: () => getAccountPath,
  getAddress: () => getAddress,
  getContractAddress: () => getContractAddress,
  getCreate2Address: () => getCreate2Address,
  getIcapAddress: () => getIcapAddress,
  getJsonWalletAddress: () => getJsonWalletAddress,
  getStatic: () => getStatic,
  hashMessage: () => hashMessage,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify,
  id: () => id,
  isAddress: () => isAddress,
  isBytes: () => isBytes,
  isBytesLike: () => isBytesLike,
  isHexString: () => isHexString,
  isValidMnemonic: () => isValidMnemonic,
  isValidName: () => isValidName,
  joinSignature: () => joinSignature,
  keccak256: () => keccak256,
  mnemonicToEntropy: () => mnemonicToEntropy,
  mnemonicToSeed: () => mnemonicToSeed,
  namehash: () => namehash,
  nameprep: () => nameprep,
  parseBytes32String: () => parseBytes32String,
  parseEther: () => parseEther,
  parseTransaction: () => parse,
  parseUnits: () => parseUnits,
  poll: () => poll,
  randomBytes: () => randomBytes,
  recoverAddress: () => recoverAddress,
  recoverPublicKey: () => recoverPublicKey,
  resolveProperties: () => resolveProperties,
  ripemd160: () => ripemd160,
  serializeTransaction: () => serialize,
  sha256: () => sha256,
  sha512: () => sha512,
  shallowCopy: () => shallowCopy,
  shuffled: () => shuffled,
  solidityKeccak256: () => keccak2562,
  solidityPack: () => pack,
  soliditySha256: () => sha2562,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  toUtf8Bytes: () => toUtf8Bytes,
  toUtf8CodePoints: () => toUtf8CodePoints,
  toUtf8String: () => toUtf8String,
  verifyMessage: () => verifyMessage,
  verifyTypedData: () => verifyTypedData,
  zeroPad: () => zeroPad
});
init_lib11();
init_lib7();
init_lib23();
init_lib16();
init_lib2();
init_lib10();
init_lib19();
init_lib21();
init_lib5();
init_lib();
init_lib17();
init_lib26();
init_lib20();
init_lib4();
init_lib6();
init_lib13();
init_lib9();
init_lib14();
init_lib27();
init_lib22();
init_lib24();
init_lib17();
init_lib9();

// node_modules/ethers/lib.esm/ethers.js
init_lib();

// node_modules/ethers/lib.esm/_version.js
var version = "ethers/5.6.8";

// node_modules/ethers/lib.esm/ethers.js
var logger = new Logger(version);

// node_modules/ethers/lib.esm/index.js
try {
  const anyGlobal = window;
  if (anyGlobal._ethers == null) {
    anyGlobal._ethers = ethers_exports;
  }
} catch (error) {
}
export {
  BaseContract,
  BigNumber,
  Contract,
  ContractFactory,
  FixedNumber,
  Signer,
  VoidSigner,
  Wallet,
  Wordlist,
  lib_exports2 as constants,
  ErrorCode as errors,
  ethers_exports as ethers,
  getDefaultProvider,
  logger,
  lib_exports4 as providers,
  utils_exports as utils,
  version,
  wordlists
};
//# sourceMappingURL=ethers.js.map
